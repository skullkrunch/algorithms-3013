// Jaycee Anderson
// 3013-alg
// Date: 9/29/21
// A03 BST Delete
// Purpose: To delete a node from a BST
// I used chatgtp to help me with this assignment

#include <iostream>
#include <cstdlib> // for rand()

using namespace std;

// Binary Heap = Priority Queue
// Min Heap = Children Larger than parent
// Max Heap = Children Smaller than parent
// Left child = 2 * i
// Right child = 2 * i + 1
// Parent = 2 // i

class Heap {
  int *heap;
  int bum;
  int capacity;

  void bubble_up(int i) {
    while (i > 1) {
      int parent = i / 2;
      if (heap[parent] > heap[i]) {
        swap(i, parent);
        i = parent;
      } else {
        break;
      }
    }
  }

// helps bubble down the values once a delete 
// and swap has happened
  void bubble_down(int i) {
    while (2 * i < bum) { // while i has at least one child
      int left = 2 * i;
      int right = 2 * i + 1;
      int smallest = i;

      if (left < bum && heap[left] < heap[smallest]) {
        smallest = left;
      }
      if (right < bum && heap[right] < heap[smallest]) {
        smallest = right;
      }
      if (smallest != i) {
        swap(i, smallest);
        i = smallest;
      } else {
        break;
      }
    }
  }

  void swap(int i, int j) {
    int temp = heap[i];
    heap[i] = heap[j];
    heap[j] = temp;
  }

public:
  Heap(int capacity = 100) {
    this->capacity = capacity;
    heap = new int[capacity];
    bum = 1;
  }

  int pop() {
    int temp = heap[1];
    bum--;
    swap(bum, 1);
    bubble_down(1);
    return temp;
  }

  void push(int x) {
    heap[bum] = x;
    bubble_up(bum);
    bum++;
  }

  void print() {
    for (int i = 1; i < bum; i++) {
      cout << heap[i] << " ";
    }
    cout << endl;
  }

// delete method that swaps and restors the heap
  void delete_at(int i) {
    if (i >= bum || i <= 0) {
      cout << "Index out of bounds!" << endl;
      return;
    }

    // Swap the element with the last element
    swap(i, bum - 1);
    bum--; // Remove the last element

    // Restore the heap property by bubbling down or up
    bubble_down(i);
    bubble_up(i);
  }
};

int main() {
  std::cout << "Hello World!\n";
  Heap heap;

  for (int i = 0; i < 10; i++) {
    heap.push(rand() % 100 + 1);
  }
  heap.push(13);
  heap.push(11);
  heap.push(7);
  heap.push(3);

  cout << "Before Deletion:" << endl;
  heap.print();

// call for the delete method
  heap.delete_at(3); // Delete element at index 3
  cout << "After Deletion:" << endl;
  heap.print();

  return 0;
}
